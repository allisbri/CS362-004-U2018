        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Much of the code used in "demonstration of how to write unit tests for dominion-base" from OSU CS362
        -:    3: * is used in this file as a template.
        -:    4: * -----------------------------------------------------------------------
        -:    5: */
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main() {
        1:   15:    int seed = 1000;
        1:   16:    int numPlayer = MAX_PLAYERS;
        1:   17:	int handCount = 5;
        -:   18:
        1:   19:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   20:               , remodel, smithy, village, baron, great_hall};
        -:   21:    struct gameState G;
        1:   22:	int testPassCount = 0;
        1:   23:	int testFailCount = 0;
        -:   24:	int totalTests;
        1:   25:	int choice1 = 0;
        1:   26:	int choice2 = 0;
        1:   27:	int choice3 = 0;
        1:   28:	int handPos = 3;
        1:   29:	int bonus = 0;
        -:   30:	int i;
        -:   31:	
        -:   32:	int p1ExHandCount;
        -:   33:	int p1AcHandCount;
        -:   34:	int p2AcHandCount;
        -:   35:	int p3AcHandCount;
        -:   36:	int p4AcHandCount;
        -:   37:	int p1ExDeckCount;
        -:   38:	int p1AcDeckCount;
        -:   39:	int p2AcDeckCount;
        -:   40:	int p3AcDeckCount;
        -:   41:	int p4AcDeckCount;
        1:   42:	int deckCount = 4; 
        -:   43:
        1:   44:	int hand1[5] = {great_hall, baron, village, smithy, remodel};
        1:   45:	int hand2[5] = {adventurer, council_room, feast, gardens, mine};
        1:   46:	int hand3[5] = {feast, council_room, remodel, mine, smithy};
        1:   47:	int hand4[5] = {village, council_room, feast, mine, remodel};
        1:   48:	int deck[4] = {copper, copper, copper, copper};
        -:   49:	
        1:   50:	memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   51:	initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   52:
        1:   53:    printf("TESTING great_hall:\n");
        -:   54:	
        1:   55:    G.whoseTurn = 0;
        1:   56:	G.handCount[0] = handCount;  
        1:   57:	G.handCount[1] = handCount;
        1:   58:	G.handCount[2] = handCount;
        1:   59:	G.handCount[3] = handCount;
        1:   60:	G.deckCount[0] = deckCount;  
        1:   61:	G.deckCount[1] = deckCount;
        1:   62:	G.deckCount[2] = deckCount;
        1:   63:	G.deckCount[3] = deckCount;
        -:   64:	
        1:   65:	memcpy(G.hand[0], hand1, sizeof(int) * handCount);
        1:   66:	memcpy(G.hand[1], hand2, sizeof(int) * handCount);
        1:   67:	memcpy(G.hand[2], hand3, sizeof(int) * handCount);
        1:   68:	memcpy(G.hand[3], hand4, sizeof(int) * handCount);
        -:   69:	
        -:   70:	int sCount[25]; 
        1:   71:	memcpy(G.deck[0], deck, sizeof(int) * deckCount);
        1:   72:	memcpy(G.deck[1], deck, sizeof(int) * deckCount);
        1:   73:	memcpy(G.deck[2], deck, sizeof(int) * deckCount);
        1:   74:	memcpy(G.deck[3], deck, sizeof(int) * deckCount);
        1:   75:	memcpy(sCount, G.supplyCount, sizeof(int) * 25);
        -:   76:	
        1:   77:	int numActionsBefore = G.numActions;
        1:   78:	cardEffect(great_hall, choice1, choice2, choice3, &G, handPos, &bonus);
        -:   79:	
        1:   80:	printf("\ntest 1: player 1 recieves 1 cards, other players do not recieve any\n");
        1:   81:	p1ExHandCount = handCount; //accounting for discarded great_hall
        1:   82:	p1AcHandCount = G.handCount[0];
        1:   83:	p2AcHandCount = G.handCount[1];
        1:   84:	p3AcHandCount = G.handCount[2];
        1:   85:	p4AcHandCount = G.handCount[3];
        1:   86:	printf("player 1: Expected handCount: %d  Actual handCount: %d\n", p1ExHandCount, p1AcHandCount); 
        1:   87:	printf("player 2: Expected handCount: %d  Actual handCount: %d\n", handCount, p2AcHandCount); 
        1:   88:	printf("player 3: Expected handCount: %d  Actual handCount: %d\n", handCount, p3AcHandCount); 
        1:   89:	printf("player 4: Expected handCount: %d  Actual handCount: %d\n", handCount, p4AcHandCount); 
        1:   90:	if (p1ExHandCount == p1AcHandCount && p2AcHandCount == handCount && p3AcHandCount == handCount && p4AcHandCount == handCount){
        1:   91:		printf("passed test 1\n");
        1:   92:		testPassCount++;
        -:   93:	}
        -:   94:	else{
    #####:   95:		printf("failed test 1\n");
    #####:   96:		testFailCount++;
        -:   97:	}
        -:   98:	
        1:   99:	printf("\ntest 2: player 1's deck is down 1 card, other players decks do not change\n");
        1:  100:	p1ExDeckCount = deckCount - 1;
        1:  101:	p1AcDeckCount = G.deckCount[0];
        1:  102:	p2AcDeckCount = G.deckCount[1];
        1:  103:	p3AcDeckCount = G.deckCount[2];
        1:  104:	p4AcDeckCount = G.deckCount[3];	
        1:  105:	printf("player 1: Expected deckCount: %d  Actual deckCount: %d\n", p1ExDeckCount, p1AcDeckCount); 
        1:  106:	printf("player 2: Expected deckCount: %d  Actual deckCount: %d\n", deckCount, p2AcDeckCount); 
        1:  107:	printf("player 3: Expected deckCount: %d  Actual deckCount: %d\n", deckCount, p3AcDeckCount); 
        1:  108:	printf("player 4: Expected deckCount: %d  Actual deckCount: %d\n", deckCount, p4AcDeckCount); 			
        1:  109:	if (p1ExDeckCount == p1AcDeckCount && p2AcDeckCount == deckCount && p3AcDeckCount == deckCount && p4AcDeckCount == deckCount){
        1:  110:		printf("passed test 2\n");
        1:  111:		testPassCount++;
        -:  112:	}
        -:  113:	else{
    #####:  114:		printf("failed test 2\n");
    #####:  115:		testFailCount++;
        -:  116:	}
        -:  117:	
        1:  118:	printf("\ntest 3: no changes to province or kindom card piles\n");
        1:  119:	int test3FailCount = 0;
       26:  120:	for (i = 0; i < 25; i++){
       25:  121:		printf("Expected supplyCount: %d  Actual supplyCount: %d\n", sCount[i], G.supplyCount[i]);
       25:  122:		if (sCount[i] != G.supplyCount[i]){
    #####:  123:			test3FailCount++;
        -:  124:		}
        -:  125:	}
        1:  126:	if (test3FailCount > 0){
    #####:  127:		printf("failed test 3\n");
    #####:  128:		testFailCount++;
        -:  129:	}
        -:  130:	else{
        1:  131:		printf("passed test 3\n");
        1:  132:		testPassCount++;
        -:  133:	}
        -:  134:	
        1:  135:	printf("\ntest 4: card from player1's deck added to hand");
        1:  136:	printf("Expected card1: %d  \n", deck[0]);
        1:  137:	printf("Actual card1: %d \n", G.deck[0][4]);
        1:  138:	if(deck[0] == G.deck[0][4]){
        1:  139:		printf("passed test 4\n");
        1:  140:		testPassCount++;
        -:  141:	}
        -:  142:	else{
    #####:  143:		printf("failed test 4\n");
    #####:  144:		testFailCount++;
        -:  145:	}
        -:  146:	
        1:  147:	printf("\ntest 5: actions increased by 1");
        1:  148:	int expectedNumActions = numActionsBefore + 1;
        1:  149:	printf("Expected num actions: %d  \n", expectedNumActions);
        1:  150:	printf("Actual num actions: %d \n", G.numActions);
        1:  151:	if(expectedNumActions == G.numActions){
        1:  152:		printf("passed test 4\n");
        1:  153:		testPassCount++;
        -:  154:	}
        -:  155:	else{
    #####:  156:		printf("failed test 4\n");
    #####:  157:		testFailCount++;
        -:  158:	}
        -:  159:	
        1:  160:	totalTests = testFailCount + testPassCount;
        1:  161:	printf("Passed %d out of %d tests\n", testPassCount, totalTests);
        1:  162:	return 0;
        -:  163:}
        -:  164:	
        -:  165:
