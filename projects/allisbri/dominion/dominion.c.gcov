        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"  
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   133585:    8:int compare(const void* a, const void* b) {
   133585:    9:	if (*(int*)a > *(int*)b)
    66878:   10:	return 1;
    66707:   11:	if (*(int*)a < *(int*)b)
    30340:   12:	return -1;
    36367:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
    #####:   44:	SelectStream(1);
    #####:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
    #####:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
    #####:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
    #####:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    #####:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    #####:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
    #####:   73:	if (numPlayers == 2)
        -:   74:	{
    #####:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
    #####:   87:	if (numPlayers == 2)
        -:   88:	{
    #####:   89:		state->supplyCount[estate] = 8;
    #####:   90:		state->supplyCount[duchy] = 8;
    #####:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
    #####:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:	state->supplyCount[silver] = 40;
    #####:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
    #####:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    #####:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    #####:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
    #####:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
    #####:  115:					if (numPlayers == 2){ 
    #####:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
    #####:  122:					state->supplyCount[i] = 10;
        -:  123:				}
    #####:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    #####:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
    #####:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
    #####:  140:		state->deckCount[i] = 0;
    #####:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
    #####:  143:			state->deck[i][j] = estate;
    #####:  144:			state->deckCount[i]++;
        -:  145:		}
    #####:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
    #####:  148:			state->deck[i][j] = copper;
    #####:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
    #####:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
    #####:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
    #####:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
    #####:  166:		state->handCount[i] = 0;
    #####:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
    #####:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
    #####:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
    #####:  182:	state->outpostPlayed = 0;
    #####:  183:	state->phase = 0;
    #####:  184:	state->numActions = 1;
    #####:  185:	state->numBuys = 1;
    #####:  186:	state->playedCardCount = 0;
    #####:  187:	state->whoseTurn = 0;
    #####:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
    #####:  192:	for (it = 0; it < 5; it++){
    #####:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
    #####:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:	return 0;
        -:  199:}
        -:  200:
      166:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      166:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      166:  209:	if (state->deckCount[player] < 1)
       89:  210:	return -1;
       77:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    19409:  214:	while (state->deckCount[player] > 0) {
    19255:  215:		card = floor(Random() * state->deckCount[player]);
    19255:  216:		newDeck[newDeckPos] = state->deck[player][card];
    19255:  217:		newDeckPos++;
  1612764:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
  1593509:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
    19255:  221:		state->deckCount[player]--;
        -:  222:	}
    19332:  223:	for (i = 0; i < newDeckPos; i++) {
    19255:  224:		state->deck[player][i] = newDeck[i];
    19255:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
       77:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:	
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:	
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:	
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:	
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:	
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:		printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:		printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:		printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:		printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:	
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
     2000:  346:int whoseTurn(struct gameState *state) {
     2000:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:	
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:	
        -:  394:	//if stack of Province cards is empty, the game ends
    #####:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
    #####:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
    #####:  401:	j = 0;
    #####:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
    #####:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
    #####:  406:			j++;
        -:  407:		}
        -:  408:	}
    #####:  409:	if ( j >= 3)
        -:  410:	{
    #####:  411:		return 1;
        -:  412:	}
        -:  413:
    #####:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
    35699:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
    35699:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:		
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
    19338:  533:		for (i = 0; i < state->discardCount[player];i++){
    19255:  534:			state->deck[player][i] = state->discard[player][i];
    19255:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       83:  538:		state->deckCount[player] = state->discardCount[player];
       83:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       83:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:		
       83:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       83:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:		
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:		
       83:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       83:  559:		if (deckCounter == 0)
        6:  560:		return -1;
        -:  561:
       77:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       77:  563:		state->deckCount[player]--;
       77:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
    35616:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
    35616:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
    35616:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    35616:  576:		state->deckCount[player]--;
    35616:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
    35693:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:	case curse:
    #####:  588:		return 0;
        -:  589:	case estate:
    #####:  590:		return 2;
        -:  591:	case duchy:
    #####:  592:		return 5;
        -:  593:	case province:
    #####:  594:		return 8;
        -:  595:	case copper:
    #####:  596:		return 0;
        -:  597:	case silver:
    #####:  598:		return 3;
        -:  599:	case gold:
    #####:  600:		return 6;
        -:  601:	case adventurer:
    #####:  602:		return 6;
        -:  603:	case council_room:
    #####:  604:		return 5;
        -:  605:	case feast:
    #####:  606:		return 4;
        -:  607:	case gardens:
    #####:  608:		return 4;
        -:  609:	case mine:
    #####:  610:		return 5;
        -:  611:	case remodel:
    #####:  612:		return 4;
        -:  613:	case smithy:
    #####:  614:		return 4;
        -:  615:	case village:
    #####:  616:		return 3;
        -:  617:	case baron:
    #####:  618:		return 4;
        -:  619:	case great_hall:
    #####:  620:		return 3;
        -:  621:	case minion:
    #####:  622:		return 5;
        -:  623:	case steward:
    #####:  624:		return 3;
        -:  625:	case tribute:
    #####:  626:		return 5;
        -:  627:	case ambassador:
    #####:  628:		return 3;
        -:  629:	case cutpurse:
    #####:  630:		return 4;
        -:  631:	case embargo: 
    #####:  632:		return 2;
        -:  633:	case outpost:
    #####:  634:		return 5;
        -:  635:	case salvager:
    #####:  636:		return 4;
        -:  637:	case sea_hag:
    #####:  638:		return 4;
        -:  639:	case treasure_map:
    #####:  640:		return 4;
        -:  641:	}
        -:  642:	
    #####:  643:	return -1;
        -:  644:}
        -:  645:
    #####:  646:int smithyEffect(struct gameState *state, int handPos, int currentPlayer){
        -:  647:	int i;
    #####:  648:	for (i = 0; i < 4; i++)
        -:  649:		{
    #####:  650:			drawCard(currentPlayer, state);
        -:  651:		}
        -:  652:		
        -:  653:		//discard card from hand
    #####:  654:		discardCard(handPos, currentPlayer, state, 0);
    #####:  655:		return 0;
        -:  656:}
        -:  657:
     2000:  658:int adventurerEffect(struct gameState *state, int currentPlayer, int drawntreasure, int *temphand, int z){
        -:  659:
    39699:  660:	while(drawntreasure<2){
        -:  661:			int cardDrawn;
    35699:  662:			if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       83:  663:				shuffle(currentPlayer, state);
        -:  664:			}
    35699:  665:			drawCard(currentPlayer, state);
    35699:  666:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    35699:  667:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4000:  668:			drawntreasure++;
        -:  669:			else{
    31699:  670:				temphand[z]=cardDrawn;
    31699:  671:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    31699:  672:				z++;
        -:  673:			}
        -:  674:		}
    35699:  675:		while(z-1>=0){
    31699:  676:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    31699:  677:			z=z-1;
        -:  678:		}
     2000:  679:		return 0;
        -:  680:}
        -:  681:
    #####:  682:int tributeEffect(struct gameState *state, int *tributeRevealedCards, int nextPlayer, int currentPlayer){
        -:  683:	int i;
    #####:  684:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  685:			if (state->deckCount[nextPlayer] > 0){
    #####:  686:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  687:				state->deckCount[nextPlayer]--;
        -:  688:			}
    #####:  689:			else if (state->discardCount[nextPlayer] > 0){
    #####:  690:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  691:				state->discardCount[nextPlayer]--;
        -:  692:			}
        -:  693:			else{
        -:  694:				//No Card to Reveal
        -:  695:				if (DEBUG){
        -:  696:					printf("No cards to reveal\n");
        -:  697:				}
        -:  698:			}
        -:  699:		}
        -:  700:		
        -:  701:		else{
    #####:  702:			if (state->deckCount[nextPlayer] == 0){
    #####:  703:				for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  704:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  705:					state->deckCount[nextPlayer]++;
    #####:  706:					state->discard[nextPlayer][i] = -1;
    #####:  707:					state->discardCount[nextPlayer]--;
        -:  708:				}
        -:  709:				
    #####:  710:				shuffle(nextPlayer,state);//Shuffle the deck
        -:  711:			} 
    #####:  712:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  713:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  714:			state->deckCount[nextPlayer]--;
    #####:  715:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  716:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  717:			state->deckCount[nextPlayer]--;
        -:  718:		}    
        -:  719:		
    #####:  720:		if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  721:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  722:			state->playedCardCount++;
    #####:  723:			tributeRevealedCards[1] = -1;
        -:  724:		}
        -:  725:
    #####:  726:		for (i = 0; i <= 2; i ++){
    #####:  727:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  728:				state->coins += 2;
        -:  729:			}
        -:  730:			
    #####:  731:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  732:				drawCard(currentPlayer, state);
    #####:  733:				drawCard(currentPlayer, state);
        -:  734:			}
        -:  735:			else{//Action Card
    #####:  736:				state->numActions = state->numActions + 2;
        -:  737:			}
        -:  738:		}
    #####:  739:		return 0;
        -:  740:}
        -:  741:
    #####:  742:int stewardEffect(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int currentPlayer){
    #####:  743:	if (choice1 == 1)
        -:  744:		{
        -:  745:			//+2 cards
    #####:  746:			drawCard(currentPlayer, state);
    #####:  747:			drawCard(currentPlayer, state);
        -:  748:		}
    #####:  749:		else if (choice1 == 2)
        -:  750:		{
        -:  751:			//+2 coins
    #####:  752:			state->coins = state->coins + 1;
        -:  753:		}
        -:  754:		else
        -:  755:		{
        -:  756:			//trash 2 cards in hand
    #####:  757:			discardCard(choice2, currentPlayer, state, 1);
    #####:  758:			discardCard(choice3, currentPlayer, state, 1);
        -:  759:		}
        -:  760:		
        -:  761:		//discard card from hand
    #####:  762:		discardCard(handPos, currentPlayer, state, 0);
    #####:  763:		return 0;
        -:  764:}
        -:  765:
    #####:  766:int cutpurseEffect(struct gameState *state, int handPos, int *bonus, int currentPlayer){ 
        -:  767:	int i;
        -:  768:	int j;
        -:  769:	int k;
    #####:  770:	updateCoins(currentPlayer, state, 2);
    #####:  771:		for (i = 0; i < state->numPlayers - 1; i++)
        -:  772:		{
    #####:  773:			if (i != currentPlayer)
        -:  774:			{
    #####:  775:				for (j = 0; j < state->handCount[i]; j++)  
        -:  776:				{
    #####:  777:					if (state->hand[i][j] == copper)
        -:  778:					{
    #####:  779:						discardCard(j, i, state, 0);
    #####:  780:						break;
        -:  781:					}
    #####:  782:					if (j == state->handCount[i])
        -:  783:					{
    #####:  784:						for (k = 0; k < state->handCount[i]; k++)
        -:  785:						{
        -:  786:							if (DEBUG)
        -:  787:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  788:						}	
    #####:  789:						break;
        -:  790:					}		
        -:  791:				}
        -:  792:				
        -:  793:			}
        -:  794:			
        -:  795:		}				
        -:  796:
        -:  797:		//discard played card from hand
    #####:  798:		discardCard(handPos, currentPlayer, state, 0);		
    #####:  799:		return 0;
        -:  800:			
        -:  801:}
        -:  802:
     2000:  803:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  804:{
        -:  805:	int i;
        -:  806:	int j;
        -:  807:	//int k;
        -:  808:	int x;
        -:  809:	int index;
     2000:  810:	int currentPlayer = whoseTurn(state);
     2000:  811:	int nextPlayer = currentPlayer + 1;
        -:  812:
     2000:  813:	int tributeRevealedCards[2] = {-1, -1};
        -:  814:	int temphand[MAX_HAND];// moved above the if statement
     2000:  815:	int drawntreasure=0;
        -:  816:	//int cardDrawn;
     2000:  817:	int z = 0;// this is the counter for the temp hand
     2000:  818:	if (nextPlayer > (state->numPlayers - 1)){
     1226:  819:		nextPlayer = 0;
        -:  820:	}
        -:  821:
        -:  822:	
        -:  823:	//uses switch to select card and perform actions
     2000:  824:	switch( card ) 
        -:  825:	{
        -:  826:	case adventurer:
     2000:  827:		adventurerEffect(state, currentPlayer, drawntreasure, temphand, z);
     2000:  828:		return 0;
        -:  829:		
        -:  830:	case council_room:
        -:  831:		//+4 Cards
    #####:  832:		for (i = 0; i < 4; i++)
        -:  833:		{
    #####:  834:			drawCard(currentPlayer, state);
        -:  835:		}
        -:  836:		
        -:  837:		//+1 Buy
    #####:  838:		state->numBuys++;
        -:  839:		
        -:  840:		//Each other player draws a card
    #####:  841:		for (i = 0; i < state->numPlayers; i++)
        -:  842:		{
    #####:  843:			if ( i != currentPlayer )
        -:  844:			{
    #####:  845:				drawCard(i, state);
        -:  846:			}
        -:  847:		}
        -:  848:		
        -:  849:		//put played card in played card pile
    #####:  850:		discardCard(handPos, currentPlayer, state, 0);
        -:  851:		
    #####:  852:		return 0;
        -:  853:		
        -:  854:	case feast:
        -:  855:		//gain card with cost up to 5
        -:  856:		//Backup hand
    #####:  857:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  858:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  859:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  860:		}
        -:  861:		//Backup hand
        -:  862:
        -:  863:		//Update Coins for Buy
    #####:  864:		updateCoins(currentPlayer, state, 5);
    #####:  865:		x = 1;//Condition to loop on
    #####:  866:		while( x == 1) {//Buy one card
    #####:  867:			if (supplyCount(choice1, state) <= 0){
        -:  868:				if (DEBUG)
        -:  869:				printf("None of that card left, sorry!\n");
        -:  870:
        -:  871:				if (DEBUG){
        -:  872:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  873:				}
        -:  874:			}
    #####:  875:			else if (state->coins < getCost(choice1)){
    #####:  876:				printf("That card is too expensive!\n");
        -:  877:
        -:  878:				if (DEBUG){
        -:  879:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  880:				}
        -:  881:			}
        -:  882:			else{
        -:  883:
        -:  884:				if (DEBUG){
        -:  885:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  886:				}
        -:  887:
    #####:  888:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  889:				x = 0;//No more buying cards
        -:  890:
        -:  891:				if (DEBUG){
        -:  892:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  893:				}
        -:  894:
        -:  895:			}
        -:  896:		}     
        -:  897:
        -:  898:		//Reset Hand
    #####:  899:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  900:			state->hand[currentPlayer][i] = temphand[i];
    #####:  901:			temphand[i] = -1;
        -:  902:		}
        -:  903:		//Reset Hand
        -:  904:		
    #####:  905:		return 0;
        -:  906:		
        -:  907:	case gardens:
    #####:  908:		return -1;
        -:  909:		
        -:  910:	case mine:
    #####:  911:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  912:
    #####:  913:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  914:		{
    #####:  915:			return -1;
        -:  916:		}
        -:  917:		
    #####:  918:		if (choice2 > treasure_map || choice2 < curse)
        -:  919:		{
    #####:  920:			return -1;
        -:  921:		}
        -:  922:
    #####:  923:		if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  924:		{
    #####:  925:			return -1;
        -:  926:		}
        -:  927:
    #####:  928:		gainCard(choice2, state, 2, currentPlayer);
        -:  929:
        -:  930:		//discard card from hand
    #####:  931:		discardCard(handPos, currentPlayer, state, 0);
        -:  932:
        -:  933:		//discard trashed card
    #####:  934:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  935:		{
    #####:  936:			if (state->hand[currentPlayer][i] == j)
        -:  937:			{
    #####:  938:				discardCard(i, currentPlayer, state, 0);			
    #####:  939:				break;
        -:  940:			}
        -:  941:		}
        -:  942:		
    #####:  943:		return 0;
        -:  944:		
        -:  945:	case remodel:
    #####:  946:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  947:
    #####:  948:		if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  949:		{
    #####:  950:			return -1;
        -:  951:		}
        -:  952:
    #####:  953:		gainCard(choice2, state, 0, currentPlayer);
        -:  954:
        -:  955:		//discard card from hand
    #####:  956:		discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:		//discard trashed card
    #####:  959:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:		{
    #####:  961:			if (state->hand[currentPlayer][i] == j)
        -:  962:			{
    #####:  963:				discardCard(i, currentPlayer, state, 0);			
    #####:  964:				break;
        -:  965:			}
        -:  966:		}
        -:  967:
        -:  968:
    #####:  969:		return 0;
        -:  970:		
        -:  971:	case smithy:
        -:  972:		//+3 Cards
    #####:  973:		smithyEffect(state, handPos, currentPlayer);
    #####:  974:		return 0;
        -:  975:		
        -:  976:	case village:
        -:  977:		//+1 Card
    #####:  978:		drawCard(currentPlayer, state);
        -:  979:		
        -:  980:		//+2 Actions
    #####:  981:		state->numActions = state->numActions + 2;
        -:  982:		
        -:  983:		//discard played card from hand
    #####:  984:		discardCard(handPos, currentPlayer, state, 0);
    #####:  985:		return 0;
        -:  986:		
        -:  987:	case baron:
    #####:  988:		state->numBuys++;//Increase buys by 1!
    #####:  989:		if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  990:			int p = 0;//Iterator for hand!
    #####:  991:			int card_not_discarded = 1;//Flag for discard set!
    #####:  992:			while(card_not_discarded){
    #####:  993:				if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  994:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  995:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  996:					state->discardCount[currentPlayer]++;
    #####:  997:					for (;p < state->handCount[currentPlayer]; p++){
    #####:  998:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  999:					}
    #####: 1000:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1001:					state->handCount[currentPlayer]--;
    #####: 1002:					card_not_discarded = 0;//Exit the loop
        -: 1003:				}
    #####: 1004:				else if (p > state->handCount[currentPlayer]){
        -: 1005:					if(DEBUG) {
        -: 1006:						printf("No estate cards in your hand, invalid choice\n");
        -: 1007:						printf("Must gain an estate if there are any\n");
        -: 1008:					}
    #####: 1009:					if (supplyCount(estate, state) > 0){
    #####: 1010:						gainCard(estate, state, 0, currentPlayer);
    #####: 1011:						state->supplyCount[estate]--;//Decrement estates
    #####: 1012:						if (supplyCount(estate, state) == 0){
    #####: 1013:							isGameOver(state);
        -: 1014:						}
        -: 1015:					}
    #####: 1016:					card_not_discarded = 0;//Exit the loop
        -: 1017:				}
        -: 1018:				
        -: 1019:				else{
    #####: 1020:					p++;//Next card
        -: 1021:				}
        -: 1022:			}
        -: 1023:		}
        -: 1024:		
        -: 1025:		else{
    #####: 1026:			if (supplyCount(estate, state) > 0){
    #####: 1027:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1028:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1029:				if (supplyCount(estate, state) == 0){
    #####: 1030:					isGameOver(state);
        -: 1031:				}
        -: 1032:			}
        -: 1033:		}
        -: 1034:		
        -: 1035:		
    #####: 1036:		return 0;
        -: 1037:		
        -: 1038:	case great_hall:
        -: 1039:		//+1 Card
    #####: 1040:		drawCard(currentPlayer, state);
        -: 1041:		
        -: 1042:		//+1 Actions
    #####: 1043:		state->numActions++;
        -: 1044:		
        -: 1045:		//discard card from hand
    #####: 1046:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1047:		return 0;
        -: 1048:		
        -: 1049:	case minion:
        -: 1050:		//+1 action
    #####: 1051:		state->numActions++;
        -: 1052:		
        -: 1053:		//discard card from hand
    #####: 1054:		discardCard(handPos, currentPlayer, state, 0);
        -: 1055:		
    #####: 1056:		if (choice1)		//+2 coins
        -: 1057:		{
    #####: 1058:			state->coins = state->coins + 2;
        -: 1059:		}
        -: 1060:		
    #####: 1061:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1062:		{
        -: 1063:			//discard hand
    #####: 1064:			while(numHandCards(state) > 0)
        -: 1065:			{
    #####: 1066:				discardCard(handPos, currentPlayer, state, 0);
        -: 1067:			}
        -: 1068:			
        -: 1069:			//draw 4
    #####: 1070:			for (i = 0; i < 4; i++)
        -: 1071:			{
    #####: 1072:				drawCard(currentPlayer, state);
        -: 1073:			}
        -: 1074:			
        -: 1075:			//other players discard hand and redraw if hand size > 4
    #####: 1076:			for (i = 0; i < state->numPlayers; i++)
        -: 1077:			{
    #####: 1078:				if (i != currentPlayer)
        -: 1079:				{
    #####: 1080:					if ( state->handCount[i] > 4 )
        -: 1081:					{
        -: 1082:						//discard hand
    #####: 1083:						while( state->handCount[i] > 0 )
        -: 1084:						{
    #####: 1085:							discardCard(handPos, i, state, 0);
        -: 1086:						}
        -: 1087:						
        -: 1088:						//draw 4
    #####: 1089:						for (j = 0; j < 4; j++)
        -: 1090:						{
    #####: 1091:							drawCard(i, state);
        -: 1092:						}
        -: 1093:					}
        -: 1094:				}
        -: 1095:			}
        -: 1096:			
        -: 1097:		}
    #####: 1098:		return 0;
        -: 1099:		
        -: 1100:	case steward:
    #####: 1101:		stewardEffect(choice1, choice2, choice3, state, handPos, currentPlayer);
    #####: 1102:		if (choice1 == 1)
        -: 1103:		{
        -: 1104:			//+2 cards
    #####: 1105:			drawCard(currentPlayer, state);
    #####: 1106:			drawCard(currentPlayer, state);
        -: 1107:		}
    #####: 1108:		else if (choice1 == 2)
        -: 1109:		{
        -: 1110:			//+2 coins
    #####: 1111:			state->coins = state->coins + 2;
        -: 1112:		}
        -: 1113:		else
        -: 1114:		{
        -: 1115:			//trash 2 cards in hand
    #####: 1116:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1117:			discardCard(choice3, currentPlayer, state, 1);
        -: 1118:		}
        -: 1119:		
        -: 1120:		//discard card from hand
    #####: 1121:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:		return 0;
        -: 1123:		
        -: 1124:	case tribute:
    #####: 1125:		tributeEffect(state, tributeRevealedCards, nextPlayer, currentPlayer);
    #####: 1126:		return 0;
        -: 1127:		
        -: 1128:	case ambassador:
    #####: 1129:		j = 0;		//used to check if player has enough cards to discard
        -: 1130:
    #####: 1131:		if (choice2 > 2 || choice2 < 0)
        -: 1132:		{
    #####: 1133:			return -1;				
        -: 1134:		}
        -: 1135:
    #####: 1136:		if (choice1 == handPos)
        -: 1137:		{
    #####: 1138:			return -1;
        -: 1139:		}
        -: 1140:
    #####: 1141:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1142:		{
    #####: 1143:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1144:			{
    #####: 1145:				j++;
        -: 1146:			}
        -: 1147:		}
    #####: 1148:		if (j < choice2)
        -: 1149:		{
    #####: 1150:			return -1;				
        -: 1151:		}
        -: 1152:
        -: 1153:		if (DEBUG) 
        -: 1154:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1155:
        -: 1156:		//increase supply count for choosen card by amount being discarded
    #####: 1157:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1158:		
        -: 1159:		//each other player gains a copy of revealed card
    #####: 1160:		for (i = 0; i < state->numPlayers; i++)
        -: 1161:		{
    #####: 1162:			if (i != currentPlayer)
        -: 1163:			{
    #####: 1164:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1165:			}
        -: 1166:		}
        -: 1167:
        -: 1168:		//discard played card from hand
    #####: 1169:		discardCard(handPos, currentPlayer, state, 0);			
        -: 1170:
        -: 1171:		//trash copies of cards returned to supply
    #####: 1172:		for (j = 0; j < choice2; j++)
        -: 1173:		{
    #####: 1174:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1175:			{
    #####: 1176:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1177:				{
    #####: 1178:					discardCard(i, currentPlayer, state, 1);
    #####: 1179:					break;
        -: 1180:				}
        -: 1181:			}
        -: 1182:		}			
        -: 1183:
    #####: 1184:		return 0;
        -: 1185:		
        -: 1186:	case cutpurse:
    #####: 1187:		cutpurseEffect(state, handPos, bonus, currentPlayer);
    #####: 1188:		return 0;
        -: 1189:
        -: 1190:		
        -: 1191:	case embargo: 
        -: 1192:		//+2 Coins
    #####: 1193:		state->coins = state->coins + 2;
        -: 1194:		
        -: 1195:		//see if selected pile is in play
    #####: 1196:		if ( state->supplyCount[choice1] == -1 )
        -: 1197:		{
    #####: 1198:			return -1;
        -: 1199:		}
        -: 1200:		
        -: 1201:		//add embargo token to selected supply pile
    #####: 1202:		state->embargoTokens[choice1]++;
        -: 1203:		
        -: 1204:		//trash card
    #####: 1205:		discardCard(handPos, currentPlayer, state, 1);		
    #####: 1206:		return 0;
        -: 1207:		
        -: 1208:	case outpost:
        -: 1209:		//set outpost flag
    #####: 1210:		state->outpostPlayed++;
        -: 1211:		
        -: 1212:		//discard card
    #####: 1213:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1214:		return 0;
        -: 1215:		
        -: 1216:	case salvager:
        -: 1217:		//+1 buy
    #####: 1218:		state->numBuys++;
        -: 1219:		
    #####: 1220:		if (choice1)
        -: 1221:		{
        -: 1222:			//gain coins equal to trashed card
    #####: 1223:			state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1224:			//trash card
    #####: 1225:			discardCard(choice1, currentPlayer, state, 1);	
        -: 1226:		}
        -: 1227:		
        -: 1228:		//discard card
    #####: 1229:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1230:		return 0;
        -: 1231:		
        -: 1232:	case sea_hag:
    #####: 1233:		for (i = 0; i < state->numPlayers; i++){
    #####: 1234:			if (i != currentPlayer){
    #####: 1235:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1236:				state->discardCount[i]++;
    #####: 1237:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1238:			}
        -: 1239:		}
    #####: 1240:		return 0;
        -: 1241:		
        -: 1242:	case treasure_map:
        -: 1243:		//search hand for another treasure_map
    #####: 1244:		index = -1;
    #####: 1245:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1246:		{
    #####: 1247:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1248:			{
    #####: 1249:				index = i;
    #####: 1250:				break;
        -: 1251:			}
        -: 1252:		}
    #####: 1253:		if (index > -1)
        -: 1254:		{
        -: 1255:			//trash both treasure cards
    #####: 1256:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1257:			discardCard(index, currentPlayer, state, 1);
        -: 1258:
        -: 1259:			//gain 4 Gold cards
    #####: 1260:			for (i = 0; i < 4; i++)
        -: 1261:			{
    #####: 1262:				gainCard(gold, state, 1, currentPlayer);
        -: 1263:			}
        -: 1264:			
        -: 1265:			//return success
    #####: 1266:			return 1;
        -: 1267:		}
        -: 1268:		
        -: 1269:		//no second treasure_map found in hand
    #####: 1270:		return -1;
        -: 1271:	}
        -: 1272:	
    #####: 1273:	return -1;
        -: 1274:}
        -: 1275:
        -: 1276:
    #####: 1277:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1278:{
        -: 1279:	
        -: 1280:	//if card is not trashed, added to Played pile 
    #####: 1281:	if (trashFlag < 1)
        -: 1282:	{
        -: 1283:		//add card to played pile
    #####: 1284:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1285:		state->playedCardCount++;
        -: 1286:	}
        -: 1287:	
        -: 1288:	//set played card to -1
    #####: 1289:	state->hand[currentPlayer][handPos] = -1;
        -: 1290:	
        -: 1291:	//remove card from player's hand
    #####: 1292:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1293:	{
        -: 1294:		//reduce number of cards in hand
    #####: 1295:		state->handCount[currentPlayer]--;
        -: 1296:	}
    #####: 1297:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1298:	{
        -: 1299:		//reduce number of cards in hand
    #####: 1300:		state->handCount[currentPlayer]--;
        -: 1301:	}
        -: 1302:	else 	
        -: 1303:	{
        -: 1304:		//replace discarded card with last card in hand
    #####: 1305:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1306:		//set last card to -1
    #####: 1307:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1308:		//reduce number of cards in hand
    #####: 1309:		state->handCount[currentPlayer]--;
        -: 1310:	}
        -: 1311:	
    #####: 1312:	return 0;
        -: 1313:}
        -: 1314:
    #####: 1315:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1316:{
        -: 1317:	//Note: supplyPos is enum of choosen card
        -: 1318:	
        -: 1319:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1320:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1321:	{
    #####: 1322:		return -1;
        -: 1323:	}
        -: 1324:	
        -: 1325:	//added card for [whoseTurn] current player:
        -: 1326:	// toFlag = 0 : add to discard
        -: 1327:	// toFlag = 1 : add to deck
        -: 1328:	// toFlag = 2 : add to hand
        -: 1329:
    #####: 1330:	if (toFlag == 1)
        -: 1331:	{
    #####: 1332:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1333:		state->deckCount[player]++;
        -: 1334:	}
    #####: 1335:	else if (toFlag == 2)
        -: 1336:	{
    #####: 1337:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1338:		state->handCount[player]++;
        -: 1339:	}
        -: 1340:	else
        -: 1341:	{
    #####: 1342:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1343:		state->discardCount[player]++;
        -: 1344:	}
        -: 1345:	
        -: 1346:	//decrease number in supply pile
    #####: 1347:	state->supplyCount[supplyPos]--;
        -: 1348:	
    #####: 1349:	return 0;
        -: 1350:}
        -: 1351:
    #####: 1352:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1353:{
        -: 1354:	int i;
        -: 1355:	
        -: 1356:	//reset coin count
    #####: 1357:	state->coins = 0;
        -: 1358:
        -: 1359:	//add coins for each Treasure card in player's hand
    #####: 1360:	for (i = 0; i < state->handCount[player]; i++)
        -: 1361:	{
    #####: 1362:		if (state->hand[player][i] == copper)
        -: 1363:		{
    #####: 1364:			state->coins += 1;
        -: 1365:		}
    #####: 1366:		else if (state->hand[player][i] == silver)
        -: 1367:		{
    #####: 1368:			state->coins += 2;
        -: 1369:		}
    #####: 1370:		else if (state->hand[player][i] == gold)
        -: 1371:		{
    #####: 1372:			state->coins += 3;
        -: 1373:		}	
        -: 1374:	}	
        -: 1375:
        -: 1376:	//add bonus
    #####: 1377:	state->coins += bonus;
        -: 1378:
    #####: 1379:	return 0;
        -: 1380:}
        -: 1381:
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
